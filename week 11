#define _CRT_SECURE_NO_WARNINGS

#if 0
#include <stdio.h>

int  countKey(char* str, char key);

int main(void)
{
    char str[100];
    char key;

    scanf("%c", &key);
    scanf("%s", str);

    printf("%d", countKey(str, key));

}

int  countKey(char* str, char key) {
    int count = 0;

	while (*str != '\0')
	{
		if (*str == key)
		{
			count++;
		}
		str++;
	}

	return count;
}
#endif

#if 0
#include <stdio.h>

void makeDot(unsigned int data, char* _binary);

int main(void)
{
    unsigned int data;
    char binary[33];
    scanf("%u", &data);

	makeDot(data, binary);
    binary[32] = NULL;

    printf("%s", binary);
    return 0;
}

void makeDot(unsigned int data, char* _binary) {
	int a = 0;

	for (int i = 31; i >= 0; i--)
	{
		if ((data >> i) & 1 == 1)
		{
			_binary[a] = '*';
		}
		else
		{
			_binary[a] = '-';
		}
		a++;
	}
}
#endif

#if 0
#include <stdio.h>

int cmp(char src[][100]);

int main(void)
{
	char arr[2][100];

	scanf("%s", arr[0]);
	scanf("%s", arr[1]);

	printf("%d", cmp(arr)); // 1 또는 -1이 리턴되어 출력 되는 형태

	return 0;
}

int cmp(char src[][100]){

	int i = 0;

	while (1)
	{
		if (src[0][i] == '\0')
		{
			break;
		}

		if (src[0][i] >= 'a' && 'z' >= src[0][i])
		{
			src[0][i] = src[0][i] - 'a' + 'A';
		}
		else if (src[0][i] >= 'A' && 'Z' >= src[0][i])
		{
			src[0][i] = src[0][i] - 'A' + 'a';
		}

		if (src[0][i] != src[1][i])
		{
			return -1;
		}

		i++;
	}

	return 1;
	
}
#endif

#if 0
#include <stdio.h>

int  isKeyIncluded(char* str, char* key);

int main(void)
{
	char str[100];
	char key[10];

	scanf("%s", str);
	scanf("%s", key);

	printf("%d", isKeyIncluded(str, key));

}

int  isKeyIncluded(char* str, char* key) {

	int i = 0;

	while (*str != '\0')
	{
		i = 0;

		if (*str == *key)
		{
			while (*(str + i) != '\0' && *(key + i) != '\0')
			{
				if (*(str + i) != *(key + i))
				{
					break;
				}
				i++;
			}

			if (*(key + i) == '\0')
			{
				return 1;
			}
		}

		str++;
	}

	return 0;
}
#endif

#if 0
#include <stdio.h>
#include <stdlib.h>

char** ese(char** _p);

int main(void)
{
	char** p = NULL;

	p = ese(p);

	printf("%s\n%s\n%s", *p, *(p + 1), *(p + 2));

	for (int i = 0; i < 3; i++) free(p[i]);
	free(p);

	return 0;
}

char** ese(char** _p) {

	_p = (char**)malloc(sizeof(char) * 3 * 30);

	_p[0] = (char*)malloc(sizeof(char) * 30);
	_p[1] = (char*)malloc(sizeof(char) * 30);
	_p[2] = (char*)malloc(sizeof(char) * 30);

	scanf("%s", _p[0]);
	scanf("%s", _p[1]);
	scanf("%s", _p[2]);

	return _p;
}
#endif

#include <stdio.h>


char* strstr(char* a, char* b) {

	int i = 0;

	while (*a != '\0')
	{
		i = 0;

		if (*a == *b)
		{
			while (*(a + i) != '\0' && *(b + i) != '\0')
			{
				if (*(a + i) != *(b + i))
				{
					break;
				}
				i++;
			}
			if (*(b + i) == '\0')
			{
				return a;
			}
		}

		a++;
	}

	return NULL;
}

int main() {

	char a[100], b[50], c[100];

	scanf("%s", a);
	scanf("%s", b);

	char* p = strstr(a, b);

	if (p == NULL)
	{
		printf("중복 없음\n");
	}
	else
	{
		printf("%p\n", a);
		printf("%p\n", p);
	}

	return 0;
}
